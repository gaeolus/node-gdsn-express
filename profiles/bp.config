module.exports = {
    client_name  : "ITN Branded Procurement v3"
  , recipients   : ['1100001011292', '0074865000000']
  , urls         : ['/cs_api/1.0/items/subscribed', '/cs_api/1.0/profile']
  , cc: function (label) {
      if (!label) return ''
      var lc = label.toLowerCase()
      var words = lc.split(/\s/)
      console.log('words: ' + words.join('-'))
      var ccWords = words.map(function (word) { return String(word.charAt(0)).toUpperCase() + word.slice(1) })
      return ccWords.join()
  }
  , country: function (code) {
      if (code == '124') return 'Canada!'
      if (code == '840') return 'United States!'
      return code
  }
  , getTextForLang: function (list, lang) {
      try {
        if (!list) return ''
        lang = lang || 'en'
        if (!list.reduce) list = [list]
        return list.reduce(function(text, e) {
          if (text) return text
          if (e.language && e.language.languageISOCode == lang) {
            if (e.text) return e.text
            if (e.shortText) return e.shortText
            if (e.longText) return e.longText
          }
          return text
        }, '')
      }
      catch (e) {
        console.log('err getting text for lang: ' + e)
        return ''
      }
  }
  , json_transform: function (orig) {
      var ti = {}
      ti.gtin = orig.tradeItemIdentification.gtin
      ti.unitDescriptor = this.cc(orig.tradeItemUnitDescriptor)

      ti.childGtin = []
      if (orig.nextLowerLevelTradeItemInformation) {
        var children = orig.nextLowerLevelTradeItemInformation.childTradeItem
        if (!Array.isArray(children)) children = [children]
        if (children) ti.childGtin = children.map(function (child) { return child.tradeItemIdentification.gtin })
      }

      var tiInfo = orig.tradeItemInformation
      var tiNeutral = tiInfo.tradingPartnerNeutralTradeItemInformation
      var tiDesc    = tiInfo.tradeItemDescriptionInformation
      ti.informationProvider = tiInfo.informationProviderOfTradeItem.nameOfInformationProvider
      ti.countryOfOrigin     = this.country(tiNeutral.tradeItemCountryOfOrigin.countryISOCode)
      ti.brandOwner          = tiNeutral.brandOwnerOfTradeItem.nameOfBrandOwner
      ti.brandName           = tiDesc.brandName

      ti.productName           = this.getTextForLang(tiDesc.tradeItemDescription)
      ti.additionalDescription = this.getTextForLang(tiDesc.additionalTradeItemDescription)
      ti.shortDescription      = this.getTextForLang(tiDesc.descriptionShort && tiDesc.descriptionShort.description)
      ti.functionalName        = this.getTextForLang(tiDesc.functionalName && tiDesc.functionalName.description)
      
      ti.manufacturer = tiNeutral.manufacturerOfTradeItem.nameOfManufacturer
      ti.ShelfLifefromProduction = tiNeutral.tradeItemHandlingInformation.minimumTradeItemLifespanFromTimeOfProduction

      ti.catchWeight = false


      var out = {}
      out.dataSource = "EccNet"
      out.tradeItem = [ti]
      return out
  }
  , xml_mappings: {
      gtin        : "/tradeItem/tradeItemIdentification/gtin"
    , provider    : "/tradeItem/tradeItemInformation/informationProviderOfTradeItem/informationProvider/gln"
    , tm          : "/tradeItem/tradeItemInformation/targetMarketInformation/targetMarketCountryCode/countryISOCode"
    , unit_type   : "/tradeItem/tradeItemUnitDescriptor"
    , gpc         : "/tradeItem/tradeItemInformation/classificationCategoryCode/classificationCategoryCode"
    , brand       : "/tradeItem/tradeItemInformation/tradeItemDescriptionInformation/brandName"
    , tm_sub      : "/tradeItem/tradeItemInformation/targetMarketInformation/targetMarketSubdivisionCode/countrySubDivisionISOCode"
    , child_count : "/tradeItem/nextLowerLevelTradeItemInformation/quantityOfChildren"
    , child_gtins : "/tradeItem/nextLowerLevelTradeItemInformation/childTradeItem/tradeItemIdentification/gtin"
    , fn_name_en  : "/tradeItem/tradeItemInformation/tradeItemDescriptionInformation/functionalName/description[language/languageISOCode='en']/shortText"
    , width_value : "/tradeItem/tradeItemInformation/tradingPartnerNeutralTradeItemInformation/tradeItemMeasurements/width/measurementValue/value"
    , width_uom   : "/tradeItem/tradeItemInformation/tradingPartnerNeutralTradeItemInformation/tradeItemMeasurements/width/measurementValue/@unitOfMeasure"
    , infoods_ener_dvi   : "/tradeItem/extension/foodAndBeverageTradeItemExtension/foodAndBeverageInformation/foodAndBeverageNutrientInformation/foodAndBeverageNutrient[nutrientTypeCode[@iNFOODSCodeValue='ENER']]/percentageOfDailyValueIntake"
    , allergy_crustacean : "/tradeItem/extension/foodAndBeverageTradeItemExtension/foodAndBeverageInformation/foodAndBeverageAllergyRelatedInformation/foodAndBeverageAllergen[allergenTypeCode='AC']/levelOfContainment"
    , allergy_eggs : "/tradeItem/extension/foodAndBeverageTradeItemExtension/foodAndBeverageInformation/foodAndBeverageAllergyRelatedInformation/foodAndBeverageAllergen[allergenTypeCode='AE']/levelOfContainment"
    , allergy_fish : "/tradeItem/extension/foodAndBeverageTradeItemExtension/foodAndBeverageInformation/foodAndBeverageAllergyRelatedInformation/foodAndBeverageAllergen[allergenTypeCode='AF']/levelOfContainment"
    , allergy_milk : "/tradeItem/extension/foodAndBeverageTradeItemExtension/foodAndBeverageInformation/foodAndBeverageAllergyRelatedInformation/foodAndBeverageAllergen[allergenTypeCode='AM']/levelOfContainment"
    , allergy_treenuts : "/tradeItem/extension/foodAndBeverageTradeItemExtension/foodAndBeverageInformation/foodAndBeverageAllergyRelatedInformation/foodAndBeverageAllergen[allergenTypeCode='AN']/levelOfContainment"
    , allergy_peanuts : "/tradeItem/extension/foodAndBeverageTradeItemExtension/foodAndBeverageInformation/foodAndBeverageAllergyRelatedInformation/foodAndBeverageAllergen[allergenTypeCode='AP']/levelOfContainment"
    , allergy_sesame : "/tradeItem/extension/foodAndBeverageTradeItemExtension/foodAndBeverageInformation/foodAndBeverageAllergyRelatedInformation/foodAndBeverageAllergen[allergenTypeCode='AS']/levelOfContainment"
    , allergy_cereals : "/tradeItem/extension/foodAndBeverageTradeItemExtension/foodAndBeverageInformation/foodAndBeverageAllergyRelatedInformation/foodAndBeverageAllergen[allergenTypeCode='AW']/levelOfContainment"
    , allergy_gluten : "/tradeItem/extension/foodAndBeverageTradeItemExtension/foodAndBeverageInformation/foodAndBeverageAllergyRelatedInformation/foodAndBeverageAllergen[allergenTypeCode='AX']/levelOfContainment"
    , allergy_soybean : "/tradeItem/extension/foodAndBeverageTradeItemExtension/foodAndBeverageInformation/foodAndBeverageAllergyRelatedInformation/foodAndBeverageAllergen[allergenTypeCode='AY']/levelOfContainment"
  }
}
